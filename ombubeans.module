<?php
/**
 * @file
 * Basic beans to share across sites.
 */


/**
 * Implements hook_preprocess_block().
 */
function ombubeans_preprocess_block(&$variables) {
  if ($variables['block']->module == 'bean') {
    // Get bean object.
    $bean = isset($variables['elements']['content']['bean']) ? $variables['elements']['content']['bean'] : $variables['elements']['bean'];
    $bid = current(element_children($bean));
    $bean = $bean[$bid]['#entity'];

    if (isset($bean->color)) {
      $variables['classes_array'][] = $bean->color;
    }

    // Add classes based on bean type.
    $variables['classes_array'][] = str_replace('_', '-', $bean->type);
  }
}

/**
 * Implements hook_menu()
 */
function ombubeans_menu() {
  $items = array();

  // Test page with all available beans.
  $items['all-modules'] = array(
    'title' => 'Available Modules',
    'page callback' => 'ombubeans_bean_test_page',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Page Callback: shows all created beans on the site.
 */
function ombubeans_bean_test_page() {
  $content = array();
  $blocks = bean_block_info();
  foreach ($blocks as $delta => $block) {
    // Don't show duplicate blocks.
    if (preg_match('/-\d+$/', $delta)) {
      continue;
    }
    $block = block_load('bean', $delta);
    $block->region = 'content';
    $block_content = _block_render_blocks(array($block));
    $build = _block_get_renderable_array($block_content);
    $content[$delta] = $build;
  }

  // Show other static blocks too.
  $other_blocks = array(
    'stand_newsletter' => 'newsletter',
  );
  foreach ($other_blocks as $module => $delta) {
    $block = block_load($module, $delta);
    $block_content = _block_render_blocks(array($block));
    $build = _block_get_renderable_array($block_content);
    $content[$delta] = $build;
  }
  return $content;
}

/**
 * AJAX callback for adding multiple widgets.
 */
function ombubeans_twitter_bean_ajax_callback($form, $form_state) {
  // If bean is being loaded via tiles.module, then need to return form from
  // bean_form key.
  return isset($form['widgets']) ? $form['widgets'] : $form['bean_form']['widgets'];
}

/**
 * Select form for selecting multiple feeds.
 */
function ombubeans_twitter_bean_select_form($form, $form_state, $bean) {
  if (count($bean->widgets) > 1) {
    $form['#bean'] = $bean;

    $options = array();
    foreach ($bean->widgets as $key => $widget) {
      $options[$key] = $widget['title'];
    }

    $form['widget'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#ajax' => array(
        'callback' => 'ombubeans_twitter_bean_select_callback',
        'wrapper' => 'twitter-widget-wrapper-' . $bean->delta,
      ),
      '#suffix' => '<br />',
    );
  }

  return $form;
}

/**
 * AJAX callback for widget select form.
 */
function ombubeans_twitter_bean_select_callback($form, $form_state) {
  $commands = array();

  $widget =
    '<div id="twitter-widget-wrapper-' . $form['#bean']->delta . '">' .
    $form['#bean']->widgets[$form_state['values']['widget']]['widget'] .
    '</div>';

  $commands[] = ajax_command_replace('#twitter-widget-wrapper-' . $form['#bean']->delta, $widget);

  $commands[] = array('command' => 'twitter_bean_update');

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}
